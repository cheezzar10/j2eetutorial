  JBoss should be started in full configuration
  
$ standalone.sh -c standalone-full.xml

  creating notifications topic using JBoss CLI
  
/] jms-topic add --topic-address=notifications --entries=java:/jms/topic/notifications
/] jms-queue add --queue-address=notifications --entries=java:/jms/queue/notifications --durable=false
/] jms-queue add --queue-address=tasks --entries=java:/jms/queue/tasks --durable=false

  NotificationSubbscriptionRegistryBean
  NotificationSubscriptionBean - stateful bean which holds durable subscription on notifications topic
  NotificationSenderBean - topic publisher
  NotificationDetectorBean - MDB which detects published message and starts receiving messages using all registered receivers
  PendingNotificationsDispatcher - starts receiving notifications from all active subscribers dispatching them to corresponding client connections ( one subscription for each connection )
  
  HTTP API
  
  /notification/newreceiver?userId=2
  /notification/receive?userId=2
  
  test page
  
  extend websockets.html page
  
  notifications.html
  
  add start button which will create new receiver for logged in user with id and save returned channel id
  connect - old functionality 
  close - old functionality
  
  remove servlet and change it to restful service
  
  the setting will allow to create non-shared durable subscriptions
  /subsystem=messaging-activemq/server=default/pooled-connection-factory=activemq-ra:write-attribute(name="client-id",value="wildfly")
  
  change sending logic to doPost
  
  checking messaging subsystem
  
  mbean statistics can be collected using MBean 
  
  jboss.as:deployment=tutorial-app.ear,subdeployment=tutorial-core.jar,subsystem=ejb3,message-driven-bean=MessagesDetector
  
  durable subscriptions can be monitored using the following MBeans
  
  jboss.as:subsystem=messaging,hornetq-server=default,runtime-queue=wildfly.<subscription name>
  
  message topics can be monitored using 
  
  jboss.as:subsystem=messaging,hornetq-server=default,jms-topic=Notifications
  
  concurrency utilities can be monitored using the following MBeans
  
  jboss.as:subsystem=ee
  jboss.as:subsystem=ee,managed-executor-service=default
  
  can be accessed via JNDI using the following name
  
  java:jboss/ee/concurrency/executor/default
  
  sending notification using curl
  
  $ curl -X POST -d "userId=1&message=3%3Atext" http://localhost:8080/tutorial/notification/send
  
  $ curl -X POST -H "Content-Type: text/plain" -d "Configure Host" http://localhost:8080/tutorial/rs/tasks
  
  $ curl -X POST -H "Content-Type: application/json" -d '{ "taskName": "Install Package", "taskParams": { "packageId": 126, "hostId": 2 } }' http://localhost:8080/tutorial/rs/tasks
  
  userId=1&message=1%3Acreating&message=1%3Acreated
  
  start JBoss binding to all interfaces standaloane.sh -b 0.0.0.0 -c standalone-full.sh
  
  large sample notification
  
  { "id": "5376424c-bad3-4dd2-ac17-167bc7236088", "status": "in progress", "message": "Creating domain: bmwklub.de", "time": "1451141909228" }
  
  add close message, subscription should remain open in case of connection close
  
  customizing redelivery settings for Notifications topic
  
  /subsystem=messaging/hornetq-server=default/address-setting="jms.topic.Notifications":add
  /subsystem=messaging/hornetq-server=default/address-setting=jms.topic.Notifications:write-attribute(name="dead-letter-address", value="jms.queue.DLQ")
  /subsystem=messaging/hornetq-server=default/address-setting=jms.topic.Notifications:write-attribute(name="expiry-address", value="jms.queue.ExpiryQueue")
  /subsystem=messaging/hornetq-server=default/address-setting=jms.topic.Notifications:write-attribute(name="redelivery-delay", value=30000)
  
  add receive (synchronously) button to subscription.html
  
  1454175385735
  